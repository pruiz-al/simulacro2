DROP TABLE IF EXISTS PhotosTags;
DROP TABLE IF EXISTS Tags;
DROP TABLE IF EXISTS Photos;
DROP TABLE IF EXISTS Users;

CREATE TABLE Users (
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	firstName VARCHAR(128) NOT NULL,
	lastName VARCHAR(128) NOT NULL,
	telephone VARCHAR(32) NOT NULL,
	email VARCHAR(128) NOT NULL,
	username VARCHAR(64) UNIQUE NOT NULL,
	`password` VARCHAR(256) NOT NULL,
	avatarUrl VARCHAR(512)
);

CREATE TABLE Photos (
	photoId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(128) NOT NULL,
	`description` VARCHAR(512),
	date DATETIME DEFAULT CURRENT_TIMESTAMP,
	`url` VARCHAR(512) NOT NULL,
	visibility VARCHAR(16) NOT NULL,
	userId INT NOT NULL,
	FOREIGN KEY (userId) REFERENCES Users (userId),
	CONSTRAINT ValidVisibility CHECK (visibility in ('Public', 'Private'))
);

CREATE TABLE Tags (
	tagId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	`name` VARCHAR(128) NOT NULL UNIQUE
);

CREATE TABLE PhotosTags (
	photoTagId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	photoId INT NOT NULL,
	tagId INT NOT NULL,
	UNIQUE(photoId, tagId),
	FOREIGN KEY (photoId) REFERENCES Photos (photoId) ON DELETE CASCADE,
	FOREIGN KEY (tagId) REFERENCES Tags (tagId) ON DELETE CASCADE
);


CREATE OR REPLACE VIEW photoswithtags AS 
SELECT * FROM photostags NATURAL JOIN photos NATURAL JOIN tags ORDER BY tags.`name`;